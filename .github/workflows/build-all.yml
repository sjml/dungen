name: Build DunGen - all platforms

on: [push]

jobs:

  build-mac:
    runs-on: macos-11
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          brew install meson
      - name: Build release version
        run: |
          buildscripts/releases/macOS.sh
      - name: Upload built artifacts
        uses: actions/upload-artifact@v2
        with:
          name: DunGen-Mac
          path: build/DunGen_dist

  build-windows:
    runs-on: windows-2019
    steps:
      - name: Check out respository
        uses: actions/checkout@v2
      - name: Install dependencies
        shell: powershell
        run: |
          python -m pip install meson
          python -m pip install ninja
      - name: Build release version
        run: |
          $vsPath = &(Join-Path ${env:ProgramFiles(x86)} "\Microsoft Visual Studio\Installer\vswhere.exe") -property installationpath
          Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments '-arch=x64 -no_logo'
          buildscripts/releases/windows.ps1
      - name: Run unit tests
        run: |
          build/DunGen_dist/DunGen.exe startup=_testing.UnitTestHarness
      - name: Upload built artifacts
        uses: actions/upload-artifact@v2
        with:
          name: DunGen-Windows
          path: build/DunGen_dist

  build-linux:
    runs-on: ubuntu-18.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install meson ninja
          sudo apt install build-essential pkg-config clang libx11-dev libxi-dev libxcursor-dev libgl-dev
      - name: Build release version
        run: |
          buildscripts/releases/linux.sh
      - name: Run unit tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: |
            build/DunGen_dist/DunGen.AppImage startup=_testing.UnitTestHarness
      - name: Upload built artifacts
        uses: actions/upload-artifact@v2
        with:
          name: DunGen-Linux
          path: build/DunGen_dist

  build-wasm:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install meson ninja
          git clone https://github.com/emscripten-core/emsdk.git ../emsdk
          ../emsdk/emsdk install $(cat platform/WebAssembly/EMSDK_VERSION.txt)
          ../emsdk/emsdk activate $(cat platform/WebAssembly/EMSDK_VERSION.txt)
          echo "[constants]" > local/wasm-cross-constants.txt
          echo "EMSDK_BASE = '$(pwd)/../emsdk/upstream/emscripten'" >> local/wasm-cross-constants.txt
      - name: Build release version
        run: |
          buildscripts/releases/wasm.sh
      - name: Upload built artifacts
        uses: actions/upload-artifact@v2
        with:
          name: DunGen-Web
          path: build/DunGen_dist

  # signing path is not set and downloadable artifact wouldn't
  #   be useful anyway, so just running this to make sure it's
  #   not *more* broken
  build-ios:
    runs-on: macos-11
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          brew install meson
      - name: Build release version for simulator
        run: |
          buildscripts/releases/iOS-Simulator.sh
      - name: Build release version for device
        run: |
          buildscripts/releases/iOS-Device.sh


  # if a release tag (starting with "v" as in "v1.0.2") has been made,
  #   prep a draft GitHub release with artifacts + push to itch
  generate-release:
    runs-on: macos-11
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-mac, build-windows, build-linux, build-wasm]
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Get version tag
        run: |
          echo "DUNGEN_VERSION=$(./buildscripts/getTag.sh)" >> $GITHUB_ENV
      - name: Download builds
        uses: actions/download-artifact@v2
        with:
          path: build_artifacts
      - name: Fix permissions
        working-directory: build_artifacts
        run: |
          chmod +x DunGen-Mac/DunGen.app/Contents/MacOS/DunGen
          chmod +x DunGen-Linux/DunGen.AppImage
      - name: Codesign macOS build
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          APPLE_ID_TEAM: ${{ secrets.APPLE_ID_TEAM }}
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p "" temp.keychain
          security default-keychain -s temp.keychain
          security unlock-keychain -p "" temp.keychain
          security import certificate.p12 -k temp.keychain -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security find-identity -v
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" temp.keychain
          /usr/bin/codesign --force --sign $APPLE_ID_TEAM --entitlements platform/macOS/entitlements.plist --options runtime --timestamp -v build_artifacts/DunGen-Mac/DunGen.app
      - name: Notarize macOS build
        working-directory: build_artifacts/DunGen-Mac
        env:
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_ID_TEAM: ${{ secrets.APPLE_ID_TEAM }}
        run: |
          sudo xcode-select -s "/Applications/Xcode_13.0.app"
          credentials="--apple-id $APPLE_ID_EMAIL --team-id $APPLE_ID_TEAM --password $APPLE_ID_PWD"
          zip -r DunGen.zip DunGen.app
          xcrun notarytool submit DunGen.zip $credentials --wait
          xcrun notarytool history $credentials --output-format json > ~/notary-history.json
          status=$(cat ~/notary-history.json | jq --raw-output .history[0].status)
          submission_id=$(cat ~/notary-history.json | jq --raw-output .history[0].id)
          xcrun notarytool log $submission_id $credentials ~/notary-log.json
          cat ~/notary-log.json
          if [[ $status != 'Accepted' ]]; then
            echo "Notarization was not accepted. :("
            exit 1
          fi
          xcrun stapler staple DunGen.app
          rm DunGen.zip
      - name: Create archives
        working-directory: build_artifacts
        run: |
          tar -czf DunGen-Mac-${{ env.DUNGEN_VERSION }}.tar.gz DunGen-Mac
          zip -r -9 DunGen-Windows-${{ env.DUNGEN_VERSION }}.zip DunGen-Windows
          tar -czf DunGen-Linux-${{ env.DUNGEN_VERSION }}.tar.gz DunGen-Linux
          tar -czf DunGen-Web-${{ env.DUNGEN_VERSION }}.tar.gz DunGen-Web
      - name: Make draft GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          body: <insert release notes here>
          files: |
            build_artifacts/*.tar.gz
            build_artifacts/*.zip
      - name: Push to itch.io
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
        run: |
          curl -L -o butler.zip https://broth.itch.ovh/butler/darwin-amd64/LATEST/archive/default
          unzip butler.zip -d butler
          butler/butler push build_artifacts/DunGen-Mac sjml/dungen:mac --user-version ${{ env.DUNGEN_VERSION }}
          butler/butler push build_artifacts/DunGen-Windows sjml/dungen:windows --user-version ${{ env.DUNGEN_VERSION }}
          butler/butler push build_artifacts/DunGen-Linux sjml/dungen:linux --user-version ${{ env.DUNGEN_VERSION }}
          mv build_artifacts/DunGen-Web/DunGen.html build_artifacts/DunGen-Web/index.html
          butler/butler push build_artifacts/DunGen-Web sjml/dungen:web --user-version ${{ env.DUNGEN_VERSION }}

